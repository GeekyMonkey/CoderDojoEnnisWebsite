@model CoderDojo.Member
@{
    List<Member> members = ViewBag.Members;
    ViewBag.Title = "ID Printout";
    ViewBag.HideMenuButton = true;
    this.Layout = null;
    Member member = Model;
    double widthCm = 10.0;
    double heightCm = 6.5;
    int cardsPerSheet = 4;
}


<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <title>Member IDs</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/paper-css/0.3.0/paper.css">
    <link href="~/Content/font/ocr.css" rel="stylesheet" />

    <style>

@@page
{
    size: A4
}

*
{
    border: 0;
    box-sizing: border-box;
    font-family: inherit;
    font-size: inherit;
    font-style: inherit;
    font-weight: inherit;
    line-height: inherit;
    list-style: none;
    margin: 0;
    padding: 0;
}

html
{
}

body
{
    font-family: 'ocraext';
    -webkit-print-color-adjust: exact !important;
}

.Card
{
    width: @(widthCm)cm;
    height: @(heightCm)cm;
    border: dashed 1px black;
    margin: 0 auto;
    padding: 0.25cm;
    position: relative;
    break-inside: avoid;
    font-size: 20px;
}

@*
.Card:nth-child(5n+5)
{
    break-before: always;
    margin-top: 1cm;
}
*@

.Card .ImageRow {
    display: flex;
    margin-top: 0.2cm;
}
        .Card .ImageRow .Login {
            writing-mode: vertical-lr;
            text-align: center;
            font-size: .65em;
            line-height: 0.9;
            margin-top: 0;
            margin-right: 0;
            transform: rotate(-180deg);
            height: 2.4cm;
            word-break: break-all;
        }

.Card .ImageRow img,.qrcode
{
    flex-grow: 1;
    width: 2.4cm;
    height: 2.4cm;
    object-fit: contain;
    text-align: center;
}

.Card .qrcode canvas
{
    width: 100%;
    max-width: 2.4cm;
}

.Card .Badges
{
    width: 100%;
    left: 0;
    text-align: center;
    position: absolute;
    bottom: .41cm;
    max-height: 3.5cm;
    display: flex;
}

.Card .Badges .Badge
{
    flex-grow: 1;
}

.Card .Badges .Badge img
{
    width: 90%;
    max-height: 1.4cm;
    max-width: 1.4cm;
    height: auto;
}

.Card .Badges span
{
    display: block;
}

.Card .Belt
{
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: .5cm;
    border: dashed 1px #888;
}

.Card .Belt span
{
    display: block;
    font-size: .4cm;
    margin-top: .05cm;
    color: black;
    text-shadow: 1px 1px 2px rgba(255, 255, 255, .8);
}

.Card .Belt .BadgeTotal
{
    text-align: center;
}
.Card .Belt .CoderDojo
{
    position: absolute;
    left: .2cm;
    top: 0;
}
.Card .Belt .Location
{
    position: absolute;
    right: .2cm;
    top: 0;
}

.Card h1
{
    font-size: 0.7cm;
    font-weight: bold;
    text-align: center;
}

.Card h2
{
    font-size: 0.4cm;
    font-style: italic;
    text-align: center;
    margin: .1cm;
}
    </style>

    <script src="//code.jquery.com/jquery-1.8.2.min.js"></script>
    <script src="~/Scripts/QRGenerator/qrcode.js"></script>
    <script src="~/Scripts/QRGenerator/jquery.qrcode.js"></script>
    <script type="text/javascript">
        $(function () {
            var qrSize = 33 * 4;
            $('.qrcode').each(function () {
                element = $(this);
                element.qrcode({
                    width: qrSize,
                    height: qrSize,
                    typeNumber: 0, // Auto
                    text: element.data("id")
                });
            });
        });
    </script>
</head>
<body class="A4">
    @if (members != null)
    {
        int skip = 0;
        do
        {
            var membersOnSheet = members.Skip(skip).Take(cardsPerSheet);
            skip += cardsPerSheet;
            <section class="sheet padding-10mm">
                @foreach (var m in membersOnSheet)
                {
                    @Card(m)
                }
            </section>
        } while (skip < members.Count);
    }
    else
    {
        <section class="sheet padding-10mm">
            @Card(member)
        </section>
    }
</body>
</html>

@helper Card(Member m)
{
    string teamName = (m.Team != null && !m.Team.TeamName.StartsWith("(")) ? ("Team: " + m.Team.TeamName) : string.Empty;
<div class="Card">
    <h1>@m.MemberName</h1>
    <h2>@teamName</h2>
    <div class="ImageRow">
        <div class="Login">@(m.Login)</div>
        <img class="Avatar" src="@m.ImageUrl" onerror="if (this.src != '/Images/User.png') this.src = '/Images/User.png';" />
        @if (m.Team != null && !m.Team.TeamName.StartsWith("("))
        {
            <img class="TeamIcon" src="@m.Team.ImageUrl" onerror="$(this).hide();" />
        }
        <div class="qrcode" data-id="@(m.Id.ToString("N"))"></div>
    </div>

    <div class="Badges">
        @foreach (var mbc in m.GetBadgeCategories())
        {
            <div class="Badge">
                <img src="@mbc.BadgeCategory.ImageUrl" />
                <span>@mbc.BadgeCount</span>
            </div>
        }
    </div>
    <div class="Belt" style="background-color: @(m.BeltColorHex) !important;">
        <span class="CoderDojo">CoderDojo</span>
        <span class="BadgeTotal">@m.MemberBadges.Where(mb => mb.Awarded != null).Count()</span>
        <span class="Location">Ennis</span>
    </div>
</div>
}
